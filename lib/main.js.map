{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": ";AAG4G;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA;;EAC5G,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC,GAAG,CAAC,IAAR,CAAa,GAAb;;EAC5B,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAZgF;;;;EAe5G,IAAC,CAAA,gBAAD,GAA4B,OAAA,CAAQ,cAAR;;EAC5B,IAAC,CAAA,SAAD,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,IAAA,GAA4B;;EAC5B,CAAA,GAA4B,QAAA,CAAE,MAAF,CAAA;WAAc,MAAM,CAAC,IAAP,CAAY,IAAZ;EAAd,EAlBgF;;;EAqB5G,IAAC,CAAA,QAAD,GAAY,CAAA,CAAE,QAAA,CAAE,IAAF,EAAQ,KAAR,EAAe,QAAf,CAAA,EAAA;;AACd,QAAA,CAAA,EAAA,KAAA,EAAA,QAAA,EAAA,SAAA,EAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA;IAEE,MAAgE,KAAA,IAAS,EAAzE;;;MAAA,MAAM,IAAI,KAAJ,CAAU,CAAA,8BAAA,CAAA,CAAiC,KAAjC,CAAA,CAAV,EAAN;;IACA,MAAA,0EAA0C;IAC1C,QAAA,8EAA0C;IAC1C,KAAA,2EAA0C;IAC1C,CAAA,GAAgB;IAChB,SAAA,GAAgB,IAAC,CAAA,QAAD,CAAU,CAAV;IAChB,IAAY,SAAA,KAAa,KAAzB;AAAA,aAAO,EAAP;KARF;;IAUE,IAAG,SAAA,GAAY,CAAE,OAAA,GAAU,KAAA,GAAQ,CAApB,CAAf;MAEE,CAAA,GAAI,CAAE,IAAI,IAAC,CAAA,SAAL,CAAe,IAAf,CAAF,CAAuB,CAAC,QAAxB,CAAiC,OAAjC,EAA0C,EAA1C;MACJ,CAAA,IAAK,QAAA,GAAW,CAAG,CAAE,CAAE,IAAC,CAAA,QAAD,CAAU,CAAV,CAAF,CAAA,GAAkB,OAApB,CAAH,GAAsC,QAAtC,GAAoD,EAApD,EAHlB;KAAA,MAAA;;;MAOE,CAAA,GAAI,KAAA,GAAQ;AACZ,cAAO,KAAP;AAAA,aACO,MADP;UACqB,CAAA,GAAyC,CAAA,GAAI,CAAE,MAAM,CAAC,MAAP,CAAwB,CAAxB,CAAF;AAA3D;AADP,aAEO,OAFP;UAEqB,CAAA,GAAI,CAAE,MAAM,CAAC,MAAP,CAAyB,CAAzB,CAAF,CAAA,GAAqC;AAAvD;AAFP,aAGO,QAHP;UAGqB,CAAA,GAAI,CAAE,MAAM,CAAC,MAAP,CAAc,IAAI,CAAC,KAAL,CAAW,CAAA,GAAI,CAAf,CAAd,CAAF,CAAA,GAAqC,CAArC,GAAyC,CAAE,MAAM,CAAC,MAAP,CAAc,IAAI,CAAC,IAAL,CAAU,CAAA,GAAI,CAAd,CAAd,CAAF;AAA3D;AAHP;UAIO,MAAM,IAAI,KAAJ,CAAU,CAAA,8CAAA,CAAA,CAAiD,GAAA,CAAI,KAAJ,CAAjD,CAAA,CAAV;AAJb,OARF;KAVF;;AAwBE,WAAO;EAzBK,CAAF,EArBgG;;;EAiD5G,IAAC,CAAA,QAAD,GAAY,CAAA,CAAE,CAAE,IAAF,CAAA,GAAA;WAAY,IAAC,CAAA,gBAAD,CAAkB,IAAlB;EAAZ,CAAF;AAjDgG",
  "sourcesContent": [
    "\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'TO-WIDTH'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# probes                    = require './probes'\n@_width_of_string         = require 'string-width'\n@_Wcstring                = require 'wcstring'\nself                      = @\nƒ                         = ( method ) -> method.bind self\n\n#-----------------------------------------------------------------------------------------------------------\n@to_width = ƒ ( text, width, settings ) ->\n  ### Fit text into `width` columns, taking into account ANSI color codes (that take up bytes but not width)\n  and double-width glyphs such as CJK characters. ###\n  throw new Error \"width must at least be 2, got #{width}\" unless width >= 2\n  padder        = settings?[ 'padder'   ] ? ' '\n  ellipsis      = settings?[ 'ellipsis' ] ? '…'\n  align         = settings?[ 'align'    ] ? 'left'\n  R             = text\n  old_width     = @width_of R\n  return R if old_width is width\n  #.........................................................................................................\n  if old_width > ( width_1 = width - 1)\n    ### `WCString` occasionally is off by one, so here we fix that: ###\n    R = ( new @_Wcstring text ).truncate width_1, ''\n    R += ellipsis + if ( ( @width_of R ) < width_1 ) then ellipsis else ''\n  #.........................................................................................................\n  else\n    ### TAINT assuming uncolored, single-width glyph for padding ###\n    p = width - old_width\n    switch align\n      when 'left'   then R =                                      R + ( padder.repeat           p     )\n      when 'right'  then R = ( padder.repeat            p     ) + R\n      when 'center' then R = ( padder.repeat Math.floor p / 2 ) + R + ( padder.repeat Math.ceil p / 2 )\n      else throw new Error \"expected one of 'left, 'right'. 'center', got #{rpr align}\"\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@width_of = ƒ ( text ) => @_width_of_string text\n\n\n\n\n\n"
  ]
}