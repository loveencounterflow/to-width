// Generated by CoffeeScript 1.10.0
(function() {
  var CND, TO_WIDTH, alert, badge, debug, echo, help, include, info, log, rpr, test, urge, warn, whisper,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = 'TO-WIDTH/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  TO_WIDTH = require('./main');

  this["demo"] = function(T, done) {
    var show_to_width, texts;
    show_to_width = function() {
      var i, j, k, len, n, results, text, text_truncated, texts;
      texts = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      for (n = i = 2; i <= 4; n = i += +1) {
        help(n);
        for (j = 0, len = texts.length; j < len; j++) {
          text = texts[j];
          text_truncated = TO_WIDTH.to_width(text, n);
          urge('|' + text_truncated + '|' + TO_WIDTH.width_of(text_truncated));
        }
      }
      results = [];
      for (n = k = 5; k <= 25; n = k += +5) {
        help(n);
        results.push((function() {
          var l, len1, results1;
          results1 = [];
          for (l = 0, len1 = texts.length; l < len1; l++) {
            text = texts[l];
            text_truncated = TO_WIDTH.to_width(text, n);
            results1.push(urge('|' + text_truncated + '|' + TO_WIDTH.width_of(text_truncated)));
          }
          return results1;
        })());
      }
      return results;
    };
    texts = ["北", "P", "Pe", "北京", "Peking", "a nice test to see the effects of fixed width", "xa\u0300xa\u0301xa\u0302xa\u0303xa\u0304xa\u0305xa\u0306xa\u0307xaxa\u0320xa\u0321xa\u0322xa\u0323xa\u0324xa\u0325xa\u0326xa\u0327xa", "a\u0300xa\u0301xa\u0302xa\u0303xa\u0304xa\u0305xa\u0306xa\u0307xaxa\u0320xa\u0321xa\u0322xa\u0323xa\u0324xa\u0325xa\u0326xa\u0327xa", "a\u20ddb\u20dec\u20dfa\u20ddb\u20dec\u20dfa\u20ddb\u20dec\u20dfa\u20ddb\u20dec\u20df", "北京 (Peking) 位於華北 (North China) 平原的西北边缘 (north-western border area)", "北京 (Peking) " + (CND.white("位於華北")) + CND.yellow(" (North China) 平原的西北边缘 (north-western border area)")];
    show_to_width.apply(null, texts);
    debug('0         1         2         3         ');
    debug('0123456789012345678901234567890123456789');
    debug((new TO_WIDTH._Wcstring("a nice test to see the effects of fixed width")).truncate(30, '*'));
    debug((new TO_WIDTH._Wcstring("北京 (Peking) 位於華北 (North China) 平原的西北边缘 (north-western border area)")).truncate(30, '*'));
    debug((new TO_WIDTH._Wcstring("北京 (Peking) " + (CND.white("位於華北")) + CND.yellow(" (North China) 平原的西北边缘 (north-western border area)"))).truncate(30, '*'));
    return done();
  };

  this._prune = function() {
    var name, value;
    for (name in this) {
      value = this[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._main = function() {
    return test(this, {
      'timeout': 3000
    });
  };

  if (module.parent == null) {
    include = ["demo"];
    this._prune();
    this._main();
  }

}).call(this);

//# sourceMappingURL=tests.js.map
