// Generated by CoffeeScript 1.10.0
(function() {
  var CND, alert, badge, debug, echo, help, include, info, log, ref, rpr, test, to_width, urge, warn, whisper, width_of,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = 'TO-WIDTH/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  ref = require('./main'), to_width = ref.to_width, width_of = ref.width_of;

  this["demo"] = function(T, done) {
    var alignments_and_texts, colors, show, stripe;
    show = function() {
      var align, border, i, j, len, len1, n, ref1, ref2, results, text;
      border = CND.blue('│');
      ref1 = [2, 3, 4, 10, 20, 30];
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        n = ref1[i];
        info();
        help(n);
        info(CND.blue('┌' + ('─'.repeat(n)) + '┐'));
        info(CND.blue('│    .    1    .    2    .    3    .    4'.slice(0, +n + 1 || 9e9) + '│'));
        info(CND.blue('│1234567890123456789012345678901234567890'.slice(0, +n + 1 || 9e9) + '│'));
        info(CND.blue('├' + ('─'.repeat(n)) + '┤'));
        for (j = 0, len1 = alignments_and_texts.length; j < len1; j++) {
          ref2 = alignments_and_texts[j], align = ref2[0], text = ref2[1];
          text = CND.white(text);
          text = to_width(text, n, {
            align: align
          });
          info(border + text + border + ' ' + (CND.blue(width_of(text))));
        }
        results.push(info('└' + ('─'.repeat(n)) + '┘'));
      }
      return results;
    };
    colors = [CND.gold, CND.steel];
    stripe = function(text) {
      var glyph, idx;
      return ((function() {
        var i, len, ref1, results;
        ref1 = Array.from(text);
        results = [];
        for (idx = i = 0, len = ref1.length; i < len; idx = ++i) {
          glyph = ref1[idx];
          results.push(colors[idx % 2](glyph));
        }
        return results;
      })()).join('');
    };
    alignments_and_texts = [['left', "北"], ['center', "北"], ['right', "北"], ['center', "X"], ['center', "北京市"], ['left', "Peking"], ['center', "Peking"], ['right', "Peking"], ['center', "xa\u0300xa\u0301xa\u0302xa\u0303xa\u0304xa\u0305xa\u0306xa\u0307xaxa\u0320xa\u0321xa\u0322xa\u0323xa\u0324xa\u0325xa\u0326xa\u0327xa"], ['center', stripe("北京位於華北 (North China) 平原的西北边缘 (north-western border area)")]];
    show();
    return done();
  };

  this["demo 2"] = function(T, done) {
    info('abcd', 'abcd'.length, Buffer.byteLength('abcd'), width_of('abcd'));
    info('äöüß', 'äöüß'.length, Buffer.byteLength('äöüß'), width_of('äöüß'));
    info('北京', '北京'.length, Buffer.byteLength('北京'), width_of('北京'));
    info('𪜀𪜁', '𪜀𪜁'.length, Buffer.byteLength('𪜀𪜁'), width_of('𪜀𪜁'));
    return done();
  };

  this._prune = function() {
    var name, value;
    for (name in this) {
      value = this[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._main = function() {
    return test(this, {
      'timeout': 3000
    });
  };

  if (module.parent == null) {
    include = ["demo"];
    this._main();
  }

}).call(this);

//# sourceMappingURL=tests.js.map
