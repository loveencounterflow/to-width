{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/tests.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'TO-WIDTH/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n#...........................................................................................................\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"demo\" ] = ( T, done ) ->\n  { to_width, width_of, }   = require './main'\n  show = ->\n    border = CND.blue '│'\n    for n in [ 2, 3, 4, 10, 20, 30 ]\n      info()\n      help n\n      info CND.blue '┌' + ( '─'.repeat n ) + '┐'\n      info CND.blue '│    .    1    .    2    .    3    .    4'[ .. n ] + '│'\n      info CND.blue '│1234567890123456789012345678901234567890'[ .. n ] + '│'\n      info CND.blue '├' + ( '─'.repeat n ) + '┤'\n      for [ align, text, ] in alignments_and_texts\n        text = CND.white text\n        text = to_width text, n, { align, }\n        info border + text + border + ' ' + ( CND.blue width_of text ) # + ' ' + ( CND.yellow text.length )\n      # info '╭' + ( '─'.repeat n ) + '╮'\n      # info '╰' + ( '─'.repeat n ) + '╯'\n      info '└' + ( '─'.repeat n ) + '┘'\n\n  colors = [ CND.gold, CND.steel, ]\n  stripe = ( text ) -> ( colors[ idx % 2 ] glyph for glyph, idx in Array.from text ).join ''\n  alignments_and_texts = [\n    [ 'left',   \"北\", ]\n    [ 'center', \"北\", ]\n    [ 'right',  \"北\", ]\n    [ 'center', \"X\", ]\n    [ 'center', \"北京市\", ]\n    [ 'left',   \"Peking\", ]\n    [ 'center', \"Peking\", ]\n    [ 'right',  \"Peking\", ]\n    [ 'center', \"xa\\u0300xa\\u0301xa\\u0302xa\\u0303xa\\u0304xa\\u0305xa\\u0306xa\\u0307xaxa\\u0320xa\\u0321xa\\u0322xa\\u0323xa\\u0324xa\\u0325xa\\u0326xa\\u0327xa\", ]\n    [ 'center', stripe \"北京位於華北 (North China) 平原的西北边缘 (north-western border area)\", ]\n    ]\n  show()\n  # debug '          1         2         3         4'\n  # debug ' 1234567890123456789012345678901234567890'\n  # debug ( new TO_WIDTH._Wcstring \"a nice test to see the effects of fixed width\" ).truncate 30, '*'\n  # debug ( new TO_WIDTH._Wcstring \"北京 (Peking) 位於華北 (North China) 平原的西北边缘 (north-western border area)\" ).truncate 30, '*'\n  # debug ( new TO_WIDTH._Wcstring \"北京 (Peking) \" + ( CND.white \"位於華北\" ) + CND.yellow \" (North China) 平原的西北边缘 (north-western border area)\" ).truncate 30, '*'\n  #.........................................................................................................\n  done?()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"demo 2\" ] = ( T, done ) ->\n  { to_width, width_of, }   = require './main'\n  info 'abcd', ( 'abcd'.length ), ( Buffer.byteLength 'abcd' ), ( width_of 'abcd' )\n  info 'äöüß', ( 'äöüß'.length ), ( Buffer.byteLength 'äöüß' ), ( width_of 'äöüß' )\n  info 'a\\u0308o\\u0308u\\u0308ß', ( 'a\\u0308o\\u0308u\\u0308ß'.length ), ( Buffer.byteLength 'a\\u0308o\\u0308u\\u0308ß' ), ( width_of 'a\\u0308o\\u0308u\\u0308ß' )\n  info '北京', ( '北京'.length ), ( Buffer.byteLength '北京' ), ( width_of '北京' )\n  info '𪜀𪜁', ( '𪜀𪜁'.length ), ( Buffer.byteLength '𪜀𪜁' ), ( width_of '𪜀𪜁' )\n  info()\n  info 'abcd',                   '#' + ( to_width 'abcdabcd',                   4 ) + '#'\n  info 'äöüß',                   '#' + ( to_width 'äöüßäöüß',                   4 ) + '#'\n  info 'a\\u0308o\\u0308u\\u0308ß', '#' + ( to_width 'a\\u0308o\\u0308u\\u0308ßa\\u0308o\\u0308u\\u0308ß', 4 ) + '#'\n  info '北京',                     '#' + ( to_width '北京北京',                     4 ) + '#'\n  info '𪜀𪜁',                     '#' + ( to_width '𪜀𪜁𪜀𪜁',                     4 ) + '#'\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"width_of\" ] = ( T, done ) ->\n  { to_width, width_of, }   = require './main'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ '', 0, null ]\n    [ '-', 1, null ]\n    [ '--', 2, null ]\n    [ '-a-', 3, null ]\n    [ '-a', 2, null ]\n    [ 'a-', 2, null ]\n    [ 'helo', 4, null ]\n    [ 'helo-world', 10, null ]\n    [ 'HELO-WORLD', 10, null ]\n    [ 'µ-DOM', 5, null ]\n    [ 'danish-øre', 10, null ]\n    [ '北京𪜀𪜁', 8, null ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result = width_of probe\n      resolve result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"to_width\" ] = ( T, done ) ->\n  { to_width, width_of, }   = require './main'\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ [ '', 5 ], '     ', null ]\n    [ [ '-', 5 ], '-    ', null ]\n    [ [ '--', 5 ], '--   ', null ]\n    [ [ '-a-', 5 ], '-a-  ', null ]\n    [ [ '-a', 5 ], '-a   ', null ]\n    [ [ 'a-', 5 ], 'a-   ', null ]\n    [ [ 'helo', 5 ], 'helo ', null ]\n    [ [ 'helo-world', 5 ], 'helo…', null ]\n    [ [ 'helo-world', 15 ], 'helo-world     ', null ]\n    [ [ 'HELO-WORLD', 5 ], 'HELO…', null ]\n    [ [ 'HELO-WORLD', 15 ], 'HELO-WORLD     ', null ]\n    [ [ 'µ-DOM', 5 ], 'µ-DOM', null ]\n    [ [ 'danish-øre', 5 ], 'dani…', null ]\n    [ [ '北京𪜀𪜁', 5 ], '北京…', null ]\n    [ [ '北京𪜀𪜁', 15 ], '北京𪜀𪜁       ', null ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      [ text, width, ]  = probe\n      # debug '^33985^', { text, width, }\n      resolve to_width text, width\n  #.........................................................................................................\n  done()\n  return null\n\n############################################################################################################\nunless module.parent?\n  test @\n\n"
  ]
}